/*
 * Decompiled with CFR 0.152.
 */
package drunkclient.beta.IMPL.Module.impl.exploit;

import drunkclient.beta.API.EventHandler;
import drunkclient.beta.API.events.world.EventPacketReceive;
import drunkclient.beta.API.events.world.EventPacketSend;
import drunkclient.beta.API.events.world.EventPreUpdate;
import drunkclient.beta.IMPL.Module.Module;
import drunkclient.beta.IMPL.Module.Type;
import drunkclient.beta.IMPL.Module.impl.combat.Killaura;
import drunkclient.beta.IMPL.set.Mode;
import drunkclient.beta.IMPL.set.Option;
import drunkclient.beta.UTILS.helper.Helper;
import drunkclient.beta.UTILS.world.MovementUtil;
import drunkclient.beta.UTILS.world.PacketUtil;
import drunkclient.beta.UTILS.world.Timer;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;
import java.util.Random;
import java.util.SplittableRandom;
import java.util.concurrent.ConcurrentLinkedDeque;
import java.util.concurrent.CopyOnWriteArrayList;
import java.util.concurrent.ThreadLocalRandom;
import net.minecraft.client.Minecraft;
import net.minecraft.network.Packet;
import net.minecraft.network.play.INetHandlerPlayServer;
import net.minecraft.network.play.client.C00PacketKeepAlive;
import net.minecraft.network.play.client.C02PacketUseEntity;
import net.minecraft.network.play.client.C03PacketPlayer;
import net.minecraft.network.play.client.C07PacketPlayerDigging;
import net.minecraft.network.play.client.C08PacketPlayerBlockPlacement;
import net.minecraft.network.play.client.C0APacketAnimation;
import net.minecraft.network.play.client.C0BPacketEntityAction;
import net.minecraft.network.play.client.C0CPacketInput;
import net.minecraft.network.play.client.C0FPacketConfirmTransaction;
import net.minecraft.network.play.server.S08PacketPlayerPosLook;
import org.apache.commons.lang3.RandomUtils;

public class Disabler
extends Module {
    private LinkedList<Packet> packetQueue;
    private int current;
    private static CopyOnWriteArrayList<C0FPacketConfirmTransaction> bypassList = new CopyOnWriteArrayList();
    Timer timer = new Timer();
    private static SplittableRandom random = new SplittableRandom();
    private int memeTick;
    private final Queue j = new ConcurrentLinkedDeque();
    private boolean expectedTeleport;
    private C03PacketPlayer.C06PacketPlayerPosLook aac5QueuedPacket = null;
    private int aac5SameReach = 5;
    List<Packet<INetHandlerPlayServer>> packetBuffer = new ArrayList<Packet<INetHandlerPlayServer>>();
    ArrayList<Packet> transactions = new ArrayList();
    ArrayList<Packet> keepAlives = new ArrayList();
    public int confirmtranscounter;
    public static final Timer PING = new Timer();
    public final Timer Timer = new Timer();
    public int confirmtransactioncounter;
    public ArrayList<Packet> delayedtransactions2 = new ArrayList();
    public static transient CopyOnWriteArrayList<Packet> packets = new CopyOnWriteArrayList();
    int currentTransaction = 0;
    public static Mode<Enum> mode = new Mode("Mode", "Mode", (Enum[])DisablerMode.values(), (Enum)DisablerMode.Dev);
    public static Option<Boolean> blinkLess = new Option<Boolean>("Blink Less", "Blink Less", false);
    public static Thread pingThread = new Thread(() -> {
        int intp = 200 + new Random().nextInt(350);
        while (true) {
            if (!PING.hasElapsed(intp, true)) {
                continue;
            }
            for (Packet p : packets) {
                if (!(p instanceof C0FPacketConfirmTransaction)) continue;
                C0FPacketConfirmTransaction f = (C0FPacketConfirmTransaction)p;
                Helper.sendMessage(String.valueOf(f.getUid()));
            }
            if (packets.size() != 0) {
                Helper.sendMessage(String.valueOf(intp));
                intp = 200 + new Random().nextInt(350);
            }
            packets.clear();
        }
    });
    double x2;
    double y2;
    S08PacketPlayerPosLook packet;

    public Disabler() {
        super("Disabler", new String[]{"Disables AC Checks"}, Type.EXPLOIT, "Disables Anti-Cheat checks");
        this.addValues(mode, blinkLess);
        this.packetQueue = new LinkedList();
    }

    @EventHandler
    public void onUpdate(EventPreUpdate event) {
        if (Minecraft.thePlayer == null) {
            return;
        }
        if (!mode.getModeAsString().equalsIgnoreCase("Verus")) return;
    }

    @Override
    public void onEnable() {
        this.packetQueue.clear();
        this.packetBuffer.clear();
        super.onEnable();
        if (mode.getModeAsString().equalsIgnoreCase("Dev")) {
            Helper.sendMessage("DO NOT FLY FOR 20 SECS");
        }
        if (!mode.getModeAsString().equalsIgnoreCase("BlocksMC")) return;
        this.packetQueue.clear();
        this.timer.reset();
        this.expectedTeleport = false;
    }

    @Override
    public void onDisable() {
        this.packetQueue.clear();
        if (mode.getModeAsString().equalsIgnoreCase("OldMatrix")) {
            PacketUtil.sendPacketNoEvent(this.packetBuffer.get(0));
            this.packetBuffer.clear();
        }
        super.onDisable();
    }

    @EventHandler
    public void onPacketSend(EventPacketSend event) {
        if (Disabler.mc.theWorld == null) {
            return;
        }
        if (Minecraft.thePlayer == null) {
            if (Minecraft.thePlayer.ticksExisted != 0) return;
            this.packetBuffer.clear();
            return;
        }
        if (mode.getModeAsString().equalsIgnoreCase("Mineplex") && event.getPacket() instanceof C00PacketKeepAlive) {
            C00PacketKeepAlive packetKeepAlive = (C00PacketKeepAlive)event.getPacket();
            packetKeepAlive.key -= 35;
        }
        if (mode.getModeAsString().equalsIgnoreCase("MinemenCombat") && Killaura.target != null && (event.getPacket() instanceof C0FPacketConfirmTransaction || event.getPacket() instanceof C00PacketKeepAlive)) {
            event.setCancelled(true);
            Helper.sendMessage("Cancelled");
        }
        if (mode.getModeAsString().equalsIgnoreCase("VerusCombat")) {
            if (event.getPacket() instanceof C00PacketKeepAlive) {
                event.setCancelled(true);
                this.packetQueue.add(event.getPacket());
            }
            if (event.getPacket() instanceof C0FPacketConfirmTransaction) {
                this.packetQueue.add(event.getPacket());
                event.setCancelled(true);
            }
            if (event.getPacket() instanceof C0BPacketEntityAction) {
                event.setCancelled(true);
            }
        }
        switch (mode.getModeAsString()) {
            case "Verus": {
                if (Minecraft.thePlayer != null) {
                    if (Minecraft.thePlayer.ticksExisted < 8) {
                        this.packetQueue.clear();
                    }
                }
                if (event.getPacket() instanceof C00PacketKeepAlive) {
                    this.packetQueue.add(event.getPacket());
                    event.setCancelled(true);
                }
                if (Minecraft.thePlayer != null) {
                    if (Minecraft.thePlayer.ticksExisted == 0) {
                        this.packetQueue.clear();
                    }
                }
                if (event.getPacket() instanceof C03PacketPlayer) {
                    double yPos = (double)Math.round(Minecraft.thePlayer.posY / 0.015625) * 0.015625;
                    Minecraft.thePlayer.setPosition(Minecraft.thePlayer.posX, yPos, Minecraft.thePlayer.posZ);
                    if (Minecraft.thePlayer.ticksExisted % 45 != 0) return;
                    return;
                }
                if (event.getPacket() instanceof S08PacketPlayerPosLook) {
                    S08PacketPlayerPosLook packet = (S08PacketPlayerPosLook)event.getPacket();
                    double x2 = packet.getX() - Minecraft.thePlayer.posX;
                    double y2 = packet.getY() - Minecraft.thePlayer.posY;
                    double z = packet.getZ() - Minecraft.thePlayer.posZ;
                    double diff = Math.sqrt(x2 * x2 + y2 * y2 + z * z);
                    if (!(diff <= 8.0)) return;
                    event.setCancelled(true);
                    Minecraft.thePlayer.sendQueue.addToSendQueueSilent(new C03PacketPlayer.C06PacketPlayerPosLook(packet.getX(), packet.getY(), packet.getZ(), packet.getYaw(), packet.getPitch(), true));
                    return;
                }
                if (!(event.getPacket() instanceof C0FPacketConfirmTransaction)) return;
                C0FPacketConfirmTransaction packet1 = (C0FPacketConfirmTransaction)event.getPacket();
                int i = 0;
                while (true) {
                    if (i >= 4) {
                        event.setCancelled(true);
                        return;
                    }
                    this.packetQueue.add(packet1);
                    ++i;
                }
            }
            case "BlocksMC": {
                if (!this.shouldRun()) {
                    return;
                }
                if (event.getPacket() instanceof C0FPacketConfirmTransaction || event.getPacket() instanceof C00PacketKeepAlive) {
                    short action = -1;
                    if (event.getPacket() instanceof C0FPacketConfirmTransaction) {
                        action = ((C0FPacketConfirmTransaction)event.getPacket()).getUid();
                    }
                    if (action != -1 && this.isInventory(action)) {
                        return;
                    }
                    event.setCancelled(true);
                    this.packetQueue.add(event.getPacket());
                }
                if (event.getPacket() instanceof C03PacketPlayer) {
                    C03PacketPlayer c03PacketPlayer = (C03PacketPlayer)event.getPacket();
                    if (Minecraft.thePlayer.ticksExisted % 45 == 0) {
                        if (Killaura.target == null) {
                            this.expectedTeleport = true;
                        }
                        c03PacketPlayer.setMoving(false);
                        c03PacketPlayer.setPosY(-0.005625);
                        c03PacketPlayer.onGround = false;
                        Helper.sendMessage("Sent");
                    }
                }
                if (!(event.getPacket() instanceof S08PacketPlayerPosLook)) return;
                if (!this.expectedTeleport) return;
                S08PacketPlayerPosLook s08PacketPlayerPosLook = (S08PacketPlayerPosLook)event.getPacket();
                this.expectedTeleport = false;
                event.setCancelled(true);
                PacketUtil.sendPacketNoEvent(new C03PacketPlayer.C06PacketPlayerPosLook(s08PacketPlayerPosLook.getX(), s08PacketPlayerPosLook.getY(), s08PacketPlayerPosLook.getZ(), s08PacketPlayerPosLook.getYaw(), s08PacketPlayerPosLook.getPitch(), false));
                return;
            }
            case "Ghostly": {
                if (event.getPacket() instanceof C0BPacketEntityAction) {
                    event.setCancelled(true);
                }
                if (event.getPacket() instanceof C03PacketPlayer) {
                    PacketUtil.sendPacket(new C0CPacketInput());
                }
                if (!(event.getPacket() instanceof C0FPacketConfirmTransaction)) return;
                event.setCancelled(true);
                return;
            }
            case "Faithful": {
                return;
            }
            case "LatestVerus": {
                if (event.getPacket() instanceof C0FPacketConfirmTransaction) {
                    C0FPacketConfirmTransaction c0fPacketConfirmTransaction = (C0FPacketConfirmTransaction)event.getPacket();
                    this.packetQueue.add(c0fPacketConfirmTransaction);
                    event.setCancelled(true);
                }
                if (event.getPacket() instanceof C03PacketPlayer) {
                    C03PacketPlayer c14 = (C03PacketPlayer)event.getPacket();
                    if (Minecraft.thePlayer.ticksExisted % 25 == 0) {
                        c14.y = -0.42;
                        c14.onGround = false;
                        c14.moving = false;
                    }
                }
                if (Minecraft.thePlayer == null) return;
                if (Minecraft.thePlayer.ticksExisted > 7) return;
                this.timer.reset();
                this.packetQueue.clear();
                return;
            }
            case "OldMatrix": {
                if (event.getPacket() instanceof C03PacketPlayer && !(event.getPacket() instanceof C03PacketPlayer.C04PacketPlayerPosition) && !(event.getPacket() instanceof C03PacketPlayer.C05PacketPlayerLook) && !(event.getPacket() instanceof C03PacketPlayer.C06PacketPlayerPosLook)) {
                    event.setCancelled(true);
                }
                if (!(event.getPacket() instanceof C02PacketUseEntity || event.getPacket() instanceof C03PacketPlayer.C04PacketPlayerPosition || event.getPacket() instanceof C03PacketPlayer.C05PacketPlayerLook || event.getPacket() instanceof C03PacketPlayer.C06PacketPlayerPosLook || event.getPacket() instanceof C07PacketPlayerDigging || event.getPacket() instanceof C08PacketPlayerBlockPlacement || event.getPacket() instanceof C0APacketAnimation)) {
                    if (!(event.getPacket() instanceof C0BPacketEntityAction)) return;
                }
                event.setCancelled(true);
                this.packetBuffer.add(event.getPacket());
                return;
            }
            case "Dev": {
                if (event.getPacket() instanceof C0FPacketConfirmTransaction) {
                    C0FPacketConfirmTransaction c0fPacketConfirmTransaction = (C0FPacketConfirmTransaction)event.getPacket();
                    this.packetQueue.add(c0fPacketConfirmTransaction);
                    event.setCancelled(true);
                }
                if (event.getPacket() instanceof C03PacketPlayer) {
                    C03PacketPlayer c14 = (C03PacketPlayer)event.getPacket();
                    if (Minecraft.thePlayer.ticksExisted % 40 == 0) {
                        c14.y = -0.911;
                        c14.onGround = false;
                        c14.moving = false;
                    }
                }
                if (Minecraft.thePlayer == null) return;
                if (Minecraft.thePlayer.ticksExisted > 7) return;
                this.timer.reset();
                this.packetQueue.clear();
                return;
            }
            case "OldVerus": {
                if (event.getPacket() instanceof C0FPacketConfirmTransaction) {
                    packets.add(event.getPacket());
                    event.setCancelled(true);
                }
                if (event.getPacket() instanceof C00PacketKeepAlive) {
                    Minecraft.thePlayer.sendQueue.addToSendQueueSilent(new C00PacketKeepAlive(((C00PacketKeepAlive)event.getPacket()).key - 1));
                    event.setCancelled(true);
                }
                if (!(event.getPacket() instanceof C03PacketPlayer)) return;
                Minecraft.thePlayer.sendQueue.addToSendQueueSilent(new C0CPacketInput());
                return;
            }
        }
    }

    @EventHandler
    public void nword(EventPreUpdate e) {
        if (Minecraft.thePlayer == null) return;
        if (Disabler.mc.theWorld == null) {
            return;
        }
        this.setSuffix(mode.getModeAsString());
        switch (mode.getModeAsString()) {
            case "OldMatrix": {
                if (this.memeTick >= 5) {
                    this.memeTick = 0;
                    PacketUtil.sendPacketNoEvent(this.packetBuffer.get(0));
                    Helper.sendMessage("RLB (Size=" + this.packetBuffer.size() + "), (tick=" + RandomUtils.nextInt(0, 50) + ")");
                    this.packetBuffer.clear();
                }
                ++this.memeTick;
                return;
            }
            case "BlocksMC": {
                if (!this.shouldRun()) {
                    this.expectedTeleport = false;
                    this.timer.reset();
                    this.packetQueue.clear();
                    return;
                }
                if (!this.timer.hasReached(260.0)) return;
                this.timer.reset();
                if (this.packetQueue.isEmpty()) return;
                return;
            }
            case "Dev": {
                if (!this.timer.hasReached(490.0)) return;
                if (!this.packetQueue.isEmpty()) {
                    PacketUtil.sendPacketSilent(this.packetQueue.poll());
                }
                this.timer.reset();
                return;
            }
            case "Verus": {
                if (Minecraft.thePlayer == null) {
                    if (Minecraft.thePlayer.ticksExisted > 5) {
                        this.expectedTeleport = false;
                        this.timer.reset();
                        this.j.clear();
                        return;
                    }
                }
                if (!this.timer.hasElapsed((long)ThreadLocalRandom.current().nextDouble(250.0, 270.0), true)) return;
                if (!this.j.isEmpty()) return;
                PacketUtil.sendPacketPlayerNoEvent((Packet)this.j.poll());
                return;
            }
            case "VerusCombat": {
                if (Minecraft.thePlayer.ticksExisted % 180 != 0) return;
                while (this.packetQueue.size() > 22) {
                    PacketUtil.sendPacketSilent(this.packetQueue.get(0));
                    this.packetQueue.remove(0);
                }
                return;
            }
            case "OldVerus": {
                if (Minecraft.thePlayer.ticksExisted % 60 == 0 && this.transactions.size() > this.currentTransaction) {
                    Minecraft.thePlayer.sendQueue.addToSendQueueSilent(this.transactions.get(this.currentTransaction++));
                }
                if (Minecraft.thePlayer.ticksExisted % 40 == 0) {
                    Minecraft.thePlayer.sendQueue.addToSendQueueSilent(new C03PacketPlayer.C06PacketPlayerPosLook(Minecraft.thePlayer.posX, Minecraft.thePlayer.posY - 11.0, Minecraft.thePlayer.posZ, Minecraft.thePlayer.rotationYaw, Minecraft.thePlayer.rotationPitch, true));
                }
                if (Minecraft.thePlayer.ticksExisted % 300 != 0) return;
                this.packetQueue.clear();
                return;
            }
        }
    }

    boolean shouldRun() {
        if (Minecraft.thePlayer == null) return false;
        if (Minecraft.thePlayer.ticksExisted <= 5) return false;
        return true;
    }

    boolean isInventory(short action) {
        if (action <= 0) return false;
        if (action >= 100) return false;
        return true;
    }

    @EventHandler
    public void onPacketReceive(EventPacketReceive event) {
        block24: {
            block23: {
                if (Disabler.mc.theWorld == null) {
                    return;
                }
                if (Minecraft.thePlayer == null) break block23;
                if (Minecraft.thePlayer != null) break block24;
                if (Minecraft.thePlayer.ticksExisted != 0) break block24;
            }
            this.packetBuffer.clear();
            return;
        }
        if (mode.getModeAsString().equalsIgnoreCase("Hypixel")) {
            if (event.getPacket() instanceof C0FPacketConfirmTransaction) {
                packets.add(event.getPacket());
                event.setCancelled(true);
            } else if (event.getPacket() instanceof C00PacketKeepAlive) {
                packets.add(event.getPacket());
                event.setCancelled(true);
            }
        }
        if (mode.getModeAsString().equalsIgnoreCase("MinemenCombat") && Killaura.target != null && (event.getPacket() instanceof C0FPacketConfirmTransaction || event.getPacket() instanceof C00PacketKeepAlive)) {
            event.setCancelled(true);
            Helper.sendMessage("Cancelled");
        }
        if (mode.getModeAsString().equalsIgnoreCase("MineplexCombat")) {
            if (event.getPacket() instanceof C00PacketKeepAlive) {
                C00PacketKeepAlive packetKeepAlive = (C00PacketKeepAlive)event.getPacket();
                packetKeepAlive.key -= RandomUtils.nextInt(3, 128);
                Helper.sendMessage(packetKeepAlive.key + "");
                event.setCancelled(true);
            }
            if (mode.getModeAsString().equalsIgnoreCase("Dev")) {
                if (!(event.getPacket() instanceof S08PacketPlayerPosLook)) {
                    // empty if block
                }
                S08PacketPlayerPosLook packet = (S08PacketPlayerPosLook)event.getPacket();
                double x = packet.getX() - Minecraft.thePlayer.posX;
                double y = packet.getY() - Minecraft.thePlayer.posY;
                double z = packet.getZ() - Minecraft.thePlayer.posZ;
                double diff = Math.sqrt(x * x + y * y + z * z);
                if (diff <= 10.0) {
                    if (Minecraft.thePlayer.ticksExisted > 25 && !MovementUtil.isOverVoid()) {
                        PacketUtil.sendPacketSilent(new C03PacketPlayer.C06PacketPlayerPosLook(packet.getX(), packet.getY(), packet.getZ(), packet.getYaw(), packet.getPitch(), true));
                        event.setCancelled(true);
                    }
                }
            }
            if (event.getPacket() instanceof C0CPacketInput) {
                C0CPacketInput packetInput = (C0CPacketInput)event.getPacket();
                packetInput.strafeSpeed -= (float)RandomUtils.nextInt(32324, 242352);
                packetInput.jumping = true;
                packetInput.forwardSpeed -= (float)RandomUtils.nextInt(0, 0);
            }
            if (event.getPacket() instanceof C0FPacketConfirmTransaction) {
                C0FPacketConfirmTransaction confirmTransaction = (C0FPacketConfirmTransaction)event.getPacket();
                confirmTransaction.uid = (short)(confirmTransaction.uid - (short)RandomUtils.nextInt(4, 130));
                event.setCancelled(true);
            }
        }
        if (mode.getModeAsString().equalsIgnoreCase("YourMom")) {
            if (event.getPacket() instanceof C0FPacketConfirmTransaction) {
                event.setCancelled(true);
            } else if (event.getPacket() instanceof C0BPacketEntityAction) {
                event.setCancelled(true);
            } else {
                boolean var10000 = event.getPacket() instanceof C03PacketPlayer.C06PacketPlayerPosLook;
                if (var10000) {
                    event.setCancelled(true);
                }
            }
        }
        if (!mode.getModeAsString().equalsIgnoreCase("Ghostly")) return;
        if (!(event.getPacket() instanceof C0FPacketConfirmTransaction)) return;
        event.setCancelled(true);
    }

    static {
        pingThread.start();
    }

    public static enum DisablerMode {
        BlocksMC,
        Hypixel,
        VerusCombat,
        Verus,
        Dev,
        $20WatchDog,
        LatestVerus;

    }
}

